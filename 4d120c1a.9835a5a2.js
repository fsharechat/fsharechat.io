(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{115:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var o=n(2),r=n(6),i=(n(0),n(218)),a={title:"Go tutorial",sidebar_label:"Go",description:"Tutorial showing how to build a Go application with QuestDB."},s={unversionedId:"tutorial/go",id:"tutorial/go",isDocsHomePage:!1,title:"Go tutorial",description:"Tutorial showing how to build a Go application with QuestDB.",source:"@site/docs/tutorial/go.md",slug:"/tutorial/go",permalink:"/docs/tutorial/go",version:"current",sidebar_label:"Go",sidebar:"docs",previous:{title:"My first database",permalink:"/docs/guide/my-first-database"},next:{title:"JDBC tutorial",permalink:"/docs/tutorial/jdbc"}},l=[{value:"Writing to QuestDB with Go",id:"writing-to-questdb-with-go",children:[{value:"Code snippet",id:"code-snippet",children:[]}]},{value:"Querying data",id:"querying-data",children:[{value:"Dependency",id:"dependency",children:[]},{value:"Code snippet",id:"code-snippet-1",children:[]},{value:"Run",id:"run",children:[]}]}],c={rightToc:l};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This first part of this tutorial will show you how to write data to QuestDB\nusing some simple Go commands."),Object(i.b)("p",null,"The second part of the tutorial uses the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://godoc.org/github.com/lib/pq"}),'Go "pq" driver')," to\nconnect to QuestDB. Support for parameterized queries is not implemented yet,\nthis is on our roadmap and we are currently working on it."),Object(i.b)("h2",{id:"writing-to-questdb-with-go"},"Writing to QuestDB with Go"),Object(i.b)("p",null,"There are 2 methods of sending data to QuestDB that we will cover here. The first uses\nInflux Line Protocol and the second uses a SQL Query to INSERT data."),Object(i.b)("p",null,"Using Influx Line Protocol (ILP) does not require that the specific table you want to\nwrite into exists as the table will be automatically created with the first write. In\naddition, if subsequent calls to write to that data contain new fields, those fields\nwill be added to the table at that time."),Object(i.b)("h3",{id:"code-snippet"},"Code snippet"),Object(i.b)("p",null,"This code simulates pulling data from Docker Hub on the number of stars and pulls for\na Docker Image. It parses a JSON Object and inserts that data into a QuestDB Database."),Object(i.b)("p",null,"First, create a ",Object(i.b)("inlineCode",{parentName:"p"},"main.go")," file with the following content:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "encoding/json"\n    "fmt"\n    "net"\n    "time"\n)\n\nconst jsonData string = "{\\"results\\":[{ \\"name\\": \\"questdb\\", \\"star_count\\": 5, \\"pull_count\\": 1919,\\"last_updated\\": \\"2020-09-02T13:47:23.804926Z\\"}]  }"\n\ntype DockerNodes struct {\n    DockerNodes []Dock `json:"results"`\n}\n\n// Dock is the overall datastructure\ntype Dock struct {\n    Name   string `json:"name"`\n    Stars  int    `json:"star_count"`\n    Pulls  int    `json:"pull_count"`\n    Update string `json:"last_updated"`\n}\n\nfunc main() {\n    var data = DockerNodes{}\n    _ = json.Unmarshal(jsonData, &data)\n    conn, err := net.Dial("tcp", "localhost:9009")\n    if err != nil {\n        fmt.Errorf("Connection Error: %v", err)\n    }\n    defer conn.Close()\n    for i := 0; i < len(data.DockerNodes); i++ {\n        timeObj := time.Now()\n        if err != nil {\n            fmt.Errorf("Time Format Error: %v", err)\n        }\n        //format a line of ILP\n        output := fmt.Sprintf("docker,name=%s pulls=%d,stars=%d %d",\n            data.DockerNodes[i].Name,\n            data.DockerNodes[i].Pulls,\n            data.DockerNodes[i].Stars,\n            timeObj.UnixNano())\n        // Write to QuestDB\n        fmt.Fprintf(conn, output+"\\n")\n    }\n    conn.Close()\n}\n')),Object(i.b)("p",null,"If you want to try this example with your own Docker Hub repository, you can get the full JSON\nfor your repository with the command"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET https://hub.docker.com/v2/repositories/<your-repo>/\n")),Object(i.b)("p",null,"And then replace the fields in the above JSON ",Object(i.b)("inlineCode",{parentName:"p"},"const"),"."),Object(i.b)("p",null,"You can then run the file with ",Object(i.b)("inlineCode",{parentName:"p"},"go run main.go")," And see the data inserted into your QuestDB instance."),Object(i.b)("h2",{id:"querying-data"},"Querying data"),Object(i.b)("h3",{id:"dependency"},"Dependency"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"go get -u github.com/lib/pq")),Object(i.b)("h3",{id:"code-snippet-1"},"Code snippet"),Object(i.b)("p",null,"Create a ",Object(i.b)("inlineCode",{parentName:"p"},"main.go")," file with the following content:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-go"}),'package main\n\nimport (\n    "database/sql"\n    "fmt"\n    _ "github.com/lib/pq"\n)\n\nfunc main() {\n\n    db, err := sql.Open("postgres", "host=localhost port=8812 user=admin password=quest dbname=qdb sslmode=disable")\n    if err != nil {\n        panic(err)\n    }\n    defer db.Close()\n\n    fmt.Println("Successfully connected!")\n\n    rows, err := db.Query("SELECT x FROM long_sequence(5);")\n    if err != nil {\n        panic(err)\n    }\n    defer rows.Close()\n\n    for rows.Next() {\n        var num string\n        err = rows.Scan(&num)\n        if err != nil {\n            panic(err)\n        }\n        fmt.Println(num)\n    }\n\n    err = rows.Err()\n    if err != nil {\n        panic(err)\n    }\n}\n')),Object(i.b)("h3",{id:"run"},"Run"),Object(i.b)("p",null,"Use ",Object(i.b)("inlineCode",{parentName:"p"},"go run main.go")," to run the code."))}u.isMDXComponent=!0}}]);