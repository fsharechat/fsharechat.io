(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{83:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return b})),t.d(a,"metadata",(function(){return i})),t.d(a,"rightToc",(function(){return s})),t.d(a,"default",(function(){return r}));var c=t(2),n=t(6),l=(t(0),t(218)),b={title:"SQL code blocks"},i={unversionedId:"__guidelines/sql-code-blocks",id:"__guidelines/sql-code-blocks",isDocsHomePage:!1,title:"SQL code blocks",description:"Checklist",source:"@site/docs/__guidelines/sql-code-blocks.md",slug:"/__guidelines/sql-code-blocks",permalink:"/docs/__guidelines/sql-code-blocks",version:"current"},s=[{value:"Checklist",id:"checklist",children:[]},{value:"Formatting",id:"formatting",children:[]},{value:"Examples",id:"examples",children:[]}],m={rightToc:s};function r(e){var a=e.components,t=Object(n.a)(e,["components"]);return Object(l.b)("wrapper",Object(c.a)({},m,t,{components:a,mdxType:"MDXLayout"}),Object(l.b)("h3",{id:"checklist"},"Checklist"),Object(l.b)("ul",{className:"contains-task-list"},Object(l.b)("li",Object(c.a)({parentName:"ul"},{className:"task-list-item"}),Object(l.b)("input",Object(c.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Use the ",Object(l.b)("inlineCode",{parentName:"li"},"questdb-sql")," language"),Object(l.b)("li",Object(c.a)({parentName:"ul"},{className:"task-list-item"}),Object(l.b)("input",Object(c.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Keywords are uppercase"),Object(l.b)("li",Object(c.a)({parentName:"ul"},{className:"task-list-item"}),Object(l.b)("input",Object(c.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Types are uppercase"),Object(l.b)("li",Object(c.a)({parentName:"ul"},{className:"task-list-item"}),Object(l.b)("input",Object(c.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Column names are camelCase"),Object(l.b)("li",Object(c.a)({parentName:"ul"},{className:"task-list-item"}),Object(l.b)("input",Object(c.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Table names are camelCase"),Object(l.b)("li",Object(c.a)({parentName:"ul"},{className:"task-list-item"}),Object(l.b)("input",Object(c.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Function names are lowercase"),Object(l.b)("li",Object(c.a)({parentName:"ul"},{className:"task-list-item"}),Object(l.b)("input",Object(c.a)({parentName:"li"},{type:"checkbox",checked:!1,disabled:!0}))," ","Statements finish with ",Object(l.b)("inlineCode",{parentName:"li"},";"))),Object(l.b)("h3",{id:"formatting"},"Formatting"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Always write explicit ",Object(l.b)("inlineCode",{parentName:"li"},"SELECT * FROM table")," instead of ",Object(l.b)("inlineCode",{parentName:"li"},"table")," with the\nexception of pages describing the shorthand expression."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"timestamp")," is not a valid column name. Neither are any type or function\nnames."),Object(l.b)("li",{parentName:"ul"},"Char returns are allowed either (1) after a ",Object(l.b)("inlineCode",{parentName:"li"},",")," (2) after a ",Object(l.b)("inlineCode",{parentName:"li"},"SQL keyword")," (3)\nafter opening or closing a bracket ",Object(l.b)("inlineCode",{parentName:"li"},"("),",",Object(l.b)("inlineCode",{parentName:"li"},")"))),Object(l.b)("h3",{id:"examples"},"Examples"),Object(l.b)("pre",null,Object(l.b)("code",Object(c.a)({parentName:"pre"},{className:"language-questdb-sql"}),"SELECT * FROM tableName;\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(c.a)({parentName:"pre"},{className:"language-questdb-sql"}),"SELECT columnName, min(columnName) FROM tableName;\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(c.a)({parentName:"pre"},{className:"language-questdb-sql"}),"CREATE TABLE tableName(columnName TYPE, columnName TYPE) timestamp(columnName) PARTITION BY DAY;\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(c.a)({parentName:"pre"},{className:"language-questdb-sql"}),"SELECT cast(columnName AS INT) FROM tableName;\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(c.a)({parentName:"pre"},{className:"language-questdb-sql"}),"SELECT columnName, min(columnName)\nFROM tableName\nWHERE columnName > 3;\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(c.a)({parentName:"pre"},{className:"language-questdb-sql"}),"SELECT\ncolumnName,\nmin(columnName),\nmax(columnName)\nFROM table WHERE columnName > 3;\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(c.a)({parentName:"pre"},{className:"language-questdb-sql"}),"CREATE TABLE tableName AS(\n...\n);\n")))}r.isMDXComponent=!0}}]);