(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{189:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(6),r=(n(0),n(218)),s={title:"REST API",sidebar_label:"REST",description:"Tutorial showing to use the REST API. This covers importing, exporting and querying data using QuestDB's HTTP endpoint."},o={unversionedId:"api/rest",id:"api/rest",isDocsHomePage:!1,title:"REST API",description:"Tutorial showing to use the REST API. This covers importing, exporting and querying data using QuestDB's HTTP endpoint.",source:"@site/docs/api/rest.md",slug:"/api/rest",permalink:"/docs/api/rest",version:"current",sidebar_label:"REST",sidebar:"docs",previous:{title:"Embedded Java API",permalink:"/docs/api/java"},next:{title:"Root directory structure",permalink:"/docs/reference/configuration/root-directory-structure"}},c=[{value:"Available methods",id:"available-methods",children:[]},{value:"/imp - Loading data",id:"imp---loading-data",children:[{value:"ACID Compliance",id:"acid-compliance",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Import with user-defined schema",id:"import-with-user-defined-schema",children:[]},{value:"Import with multiple options",id:"import-with-multiple-options",children:[]}]},{value:"/exec - Querying Data",id:"exec---querying-data",children:[{value:"Syntax",id:"syntax",children:[]},{value:"Success Response",id:"success-response",children:[]},{value:"Error response",id:"error-response",children:[]}]},{value:"/exp - Export Data",id:"exp---export-data",children:[{value:"Syntax",id:"syntax-1",children:[]},{value:"Success response",id:"success-response-1",children:[]},{value:"Error response",id:"error-response-1",children:[]}]}],l={rightToc:c};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The QuestDB REST API is based around standard HTTP features and is understood by\noff-the-shelf HTTP clients. It provides a simple way to interact with QuestDB\nand is compatible with most programming languages. API functions are fully keyed\non the URL and they use query parameters as their arguments."),Object(r.b)("p",null,"Responses are function specific, for example you can download query results as\nCSV files, directly from the API. You can also get JSON responses."),Object(r.b)("p",null,"The REST API can be accessed interactively using Web Console that is a part of\nQuestDB distribution. Find out more in the section\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guide/web-console/"}),"using the Web Console"),"."),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Other machines on your network can access the console and the REST API on\n",Object(r.b)("inlineCode",{parentName:"p"},"http://IP_OF_THE_HOST_MACHINE:9000")))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"All strings need to be passed as url-encoded, for example by using\n",Object(r.b)("inlineCode",{parentName:"p"},"--data-urlencode")))),Object(r.b)("h2",{id:"available-methods"},"Available methods"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#imp---loading-data"}),Object(r.b)("inlineCode",{parentName:"a"},"/imp")," to load data")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#exec---querying-data"}),Object(r.b)("inlineCode",{parentName:"a"},"/exec")," to query data")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#exp---export-data"}),Object(r.b)("inlineCode",{parentName:"a"},"/exp")," to export data")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"/chk"))),Object(r.b)("h2",{id:"imp---loading-data"},"/imp - Loading data"),Object(r.b)("p",null,"The function ",Object(r.b)("inlineCode",{parentName:"p"},"/imp")," streams tabular text data directly into a table. It supports\nCSV, TAB and Pipe (",Object(r.b)("inlineCode",{parentName:"p"},"|"),") delimited inputs and optional headers. There are no\nrestrictions on data size. Data type and structure is detected automatically and\nusually without additional configuration. However in some cases additional\nconfiguration can be provided to augment automatic detection results."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"The structure detection algorithm analyses the chunk in the beginning and relies\non relative uniformity of data. When the first chunk is non-representative of\nthe rest of the data, automatic imports can yield errors."))),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"/imp")," column names from header row as table columns. The following characters\nare removed from column names:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"     [space] _  ?  .  ,  \\  \\  \\\\  /  \\0  :  )  (  +  -  *  %  ~\n")),Object(r.b)("p",null,"When a header row is missing, column names are generated automatically."),Object(r.b)("h3",{id:"acid-compliance"},"ACID Compliance"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"/imp")," is fully ACID compliant, although Atomicity and Durability can be relaxed\nto meet convenience and performance demands."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Atomicity")," is fully insured against any connection problems. If server\ndetects closed socket the entire request is rolled back instantly and\ntransparently for any existing readers. The only time data can be partially\nimported is when atomicity is in ",Object(r.b)("code",null,"relaxed"),' mode and data cannot be\nconverted to column type. In this scenario "defective" row of data is discarded\nand ',Object(r.b)("code",null,"/imp")," continues to stream request data into table."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Consistency")," is guaranteed by consistency of append transactions against\nQuestDB storage engine."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Isolation")," Data is committed to QuestDB storage engine at end of request.\nUncommitted transactions are not visible to readers."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Durability")," ",Object(r.b)("inlineCode",{parentName:"p"},"/imp")," streams data from network socket buffer directly into\nmemory mapped files. At this point data is handed over to the OS and is\nresilient against QuestDB internal errors and unlikely but hypothetically\npossible crashes. This is default method of appending data and it is chosen for\nits performance characteristics. In cases where transaction has to be resilient\nagainst OS errors or power losses physical durability can be enforced. At a cost\nof append performance QuestDB storage engine will also guarantee that each\nmemory block is flushed to physical device."),Object(r.b)("h3",{id:"examples"},"Examples"),Object(r.b)("p",null,"The following examples upload ",Object(r.b)("inlineCode",{parentName:"p"},"ratings.csv"),". This file can be found at\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://grouplens.org/datasets/movielens"}),"grouplens.org"),". The response shows\ntable name, columns, types, error count in each column and total rows. When\ncolumn types are correct, error count must be ",Object(r.b)("inlineCode",{parentName:"p"},"0"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:'title="Import from file, automatic schema detection"',title:'"Import',from:!0,"file,":!0,automatic:!0,schema:!0,'detection"':!0}),"curl -i -F data=@ratings.csv http://localhost:9000/imp\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:'title="Response"',title:'"Response"'}),"HTTP/1.1 200 OK\nServer: questDB/1.0\nDate: Fri, 28 Oct 2016 17:58:31 GMT\nTransfer-Encoding: chunked\nContent-Type: text/plain; charset=utf-8\n\n+-----------------------------------------------------------------------------------+\n|      Location:  |               /Users/info/dev/data/db/ratings.csv  |    Errors  |\n|   Partition by  |                                              NONE  |            |\n+-----------------------------------------------------------------------------------+\n|   Rows handled  |                                          22884377  |            |\n|  Rows imported  |                                          22884377  |            |\n+-----------------------------------------------------------------------------------+\n|              0  |                                     userId INT(4)  |         0  |\n|              1  |                                    movieId INT(4)  |         0  |\n|              2  |                                  rating DOUBLE(8)  |         0  |\n|              3  |                                  timestamp INT(4)  |         0  |\n+-----------------------------------------------------------------------------------+\n")),Object(r.b)("p",null,"JSON response for the same request would be:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="JSON response"',title:'"JSON','response"':!0}),'{\n  "status": "OK",\n  "location": "ratings.csv",\n  "rowsRejected": 0,\n  "rowsImported": 22884377,\n  "columns": [\n    {\n      "name": "userId",\n      "type": "INT",\n      "size": 4,\n      "errors": 0\n    },\n    {\n      "name": "movieId",\n      "type": "INT",\n      "size": 4,\n      "errors": 0\n    },\n    {\n      "name": "rating",\n      "type": "DOUBLE",\n      "size": 8,\n      "errors": 0\n    },\n    {\n      "name": "timestamp",\n      "type": "INT",\n      "size": 4,\n      "errors": 0\n    }\n  ]\n}\n')),Object(r.b)("h3",{id:"import-with-user-defined-schema"},"Import with user-defined schema"),Object(r.b)("p",null,"This example overrides types of ",Object(r.b)("inlineCode",{parentName:"p"},"userId")," and ",Object(r.b)("inlineCode",{parentName:"p"},"movieId")," by including ",Object(r.b)("inlineCode",{parentName:"p"},"schema"),"\nparameter. Schema is passed as a ",Object(r.b)("inlineCode",{parentName:"p"},"JSON object"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:'title="Import with custom schema"',title:'"Import',with:!0,custom:!0,'schema"':!0}),'curl -i \\\n-F schema=\'[{"name":"userId", "type": "STRING"},{"name":"movieId", "type":"STRING"}]\' \\\n-F data=@ratings.csv \\\nhttp://localhost:9000/imp\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:'title="Response"',title:'"Response"'}),"HTTP/1.1 200 OK\nServer: questDB/1.0\nDate: Sun, 30 Oct 2016 1:20:7 GMT\nTransfer-Encoding: chunked\nContent-Type: text/plain; charset=utf-8\n\n+-----------------------------------------------------------------------------------+\n|      Location:  |               /Users/info/dev/data/db/ratings.csv  |    Errors  |\n|   Partition by  |                                              NONE  |            |\n+-----------------------------------------------------------------------------------+\n|   Rows handled  |                                          22884377  |            |\n|  Rows imported  |                                          22884377  |            |\n+-----------------------------------------------------------------------------------+\n|              0  |                                 userId STRING(16)  |         0  |\n|              1  |                                movieId STRING(16)  |         0  |\n|              2  |                                  rating DOUBLE(8)  |         0  |\n|              3  |                                  timestamp INT(4)  |         0  |\n+-----------------------------------------------------------------------------------+\n")),Object(r.b)("h3",{id:"import-with-multiple-options"},"Import with multiple options"),Object(r.b)("p",null,"This example shows the concatenation of several import parameters"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:'title="Using multiple options"',title:'"Using',multiple:!0,'options"':!0}),"curl -i \\\n-F data=@ratings.csv \\\n'http://localhost:9000/imp?forceHeaders=true&overwrite=true'\n")),Object(r.b)("h2",{id:"exec---querying-data"},"/exec - Querying Data"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"/exec")," compiles and executes the SQL query supplied as an argument and returns\na JSON object with either data or an error. The ",Object(r.b)("strong",{parentName:"p"},"error object")," contains\nmessage and position in query text. Position is a number of characters from\nbeginning of query where error occurred."),Object(r.b)("p",null,"The result of a successful execution is a ",Object(r.b)("strong",{parentName:"p"},"JSON object")," containing an array of\ndata rows. Each data row is array of column values. The dataset metadata is\nreturned in ",Object(r.b)("inlineCode",{parentName:"p"},"columns")," field - list of column names and their types."),Object(r.b)("p",null,"Query execution terminates automatically when the socket connection is closed."),Object(r.b)("h3",{id:"syntax"},"Syntax"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"/exec")," is HTTP GET request with following query arguments:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Remarks"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"query")," (required)"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"URL-encoded")," query text. It can be multi-line")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"limit")," (optional)"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Paging argument. For example, ",Object(r.b)("inlineCode",{parentName:"td"},"limit=10,20")," will return row numbers 10 thru to 20 inclusive.and ",Object(r.b)("inlineCode",{parentName:"td"},"limit=20")," will return first 20 rows, which is equivalent to ",Object(r.b)("inlineCode",{parentName:"td"},"limit=0,20"),". ",Object(r.b)("inlineCode",{parentName:"td"},"limit=-20")," will return the last 20 rows.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"count")," (optional, boolean)"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Counts the number of rows and returns this value in the message header. Default value is ",Object(r.b)("inlineCode",{parentName:"td"},"false"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"nm")," (optional, boolean)"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Skips the metadata section of the response when set to ",Object(r.b)("inlineCode",{parentName:"td"},"true"),". Default value is ",Object(r.b)("inlineCode",{parentName:"td"},"false"))))),Object(r.b)("p",null,"The following will use ",Object(r.b)("inlineCode",{parentName:"p"},"curl")," to send a query over http. The result will be sent\nback over HTTP."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"The ",Object(r.b)("inlineCode",{parentName:"p"},"query")," text must be URL-encoded."))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),'curl -v \\\n-G http://localhost:9000/exp \\\n--data-urlencode "query=select * from mydb;" -d limit=5\n')),Object(r.b)("h3",{id:"success-response"},"Success Response"),Object(r.b)("p",null,"This is an example of successful query execution response. HTTP status code\n",Object(r.b)("inlineCode",{parentName:"p"},"200"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="JSON response - success"',title:'"JSON',response:!0,"-":!0,'success"':!0}),'{\n  "query": "select timestamp, tempF from weather limit 2;",\n  "columns": [\n    {\n      "name": "timestamp",\n      "type": "TIMESTAMP"\n    },\n    {\n      "name": "tempF",\n      "type": "INT"\n    }\n  ],\n  "dataset": [\n    ["2010-01-01T00:00:00.000000Z", 34],\n    ["2010-01-01T00:51:00.000000Z", 34]\n  ],\n  "count": 2\n}\n')),Object(r.b)("h3",{id:"error-response"},"Error response"),Object(r.b)("p",null,"Example of error response. HTTP status code ",Object(r.b)("inlineCode",{parentName:"p"},"400")," is used for query errors and\n",Object(r.b)("inlineCode",{parentName:"p"},"500")," for internal server errors, which should not normally occur."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="JSON response - error"',title:'"JSON',response:!0,"-":!0,'error"':!0}),'{\n  "query": "\\nselect AccidentIndex, Date, Time2 from \'Accidents0514.csv\' limit 10",\n  "error": "Invalid column: Time2",\n  "position": 29\n}\n')),Object(r.b)("h2",{id:"exp---export-data"},"/exp - Export Data"),Object(r.b)("p",null,"Just like ",Object(r.b)("inlineCode",{parentName:"p"},"/exec"),", ",Object(r.b)("inlineCode",{parentName:"p"},"/exp")," allows you to pass url-encoded queries. Instead of a\njson, the results are returned in tabular form to be saved into a file such as\n",Object(r.b)("inlineCode",{parentName:"p"},".csv")),Object(r.b)("p",null,"Server responds with HTTP ",Object(r.b)("inlineCode",{parentName:"p"},"200")," when query execution is successful and ",Object(r.b)("inlineCode",{parentName:"p"},"400"),"\nwhen there is error and returns error text."),Object(r.b)("h3",{id:"syntax-1"},"Syntax"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"/exp")," is HTTP GET request with following query arguments: |Argument | Remarks |\n|---|---| |",Object(r.b)("inlineCode",{parentName:"p"},"query")," (required) |",Object(r.b)("inlineCode",{parentName:"p"},"URL-encoded")," query text. It can be multi-line |\n| ",Object(r.b)("inlineCode",{parentName:"p"},"limit")," (optional) | Paging argument. For example, ",Object(r.b)("inlineCode",{parentName:"p"},"limit=10,20")," will return\nrow numbers 10 thru to 20 inclusive.and ",Object(r.b)("inlineCode",{parentName:"p"},"limit=20")," will return first 20 rows,\nwhich is equivalent to ",Object(r.b)("inlineCode",{parentName:"p"},"limit=0,20"),". ",Object(r.b)("inlineCode",{parentName:"p"},"limit=-20")," will return the last 20 rows.|"),Object(r.b)("h3",{id:"success-response-1"},"Success response"),Object(r.b)("p",null,"Below is example of exporting data from command line using ",Object(r.b)("inlineCode",{parentName:"p"},"curl")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -v -G http://localhost:9000/exp \\\n    --data-urlencode \"query=select AccidentIndex2, Date, Time from 'Accidents0514.csv'\" \\\n    -d limit=5\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:'title="Success response"',title:'"Success','response"':!0}),'*   Trying ::1...\n* connect to ::1 port 9000 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 9000 (#0)\n> GET /exp?query=select%20AccidentIndex%2C%20Date%2C%20Time%20from%20%27Accidents0514.csv%27&limit=5 HTTP/1.1\n> Host: localhost:9000\n> User-Agent: curl/7.49.1\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Server: questDB/1.0\n< Date: Wed, 9 Nov 2016 17:58:54 GMT\n< Transfer-Encoding: chunked\n< Content-Type: text/csv; charset=utf-8\n< Content-Disposition: attachment; filename="questdb-query-1478714334308.csv"\n<\n"AccidentIndex","Date","Time"\n200501BS00001,"2005-01-04T00:00:00.000Z",17:42\n200501BS00002,"2005-01-05T00:00:00.000Z",17:36\n200501BS00003,"2005-01-06T00:00:00.000Z",00:15\n200501BS00004,"2005-01-07T00:00:00.000Z",10:35\n200501BS00005,"2005-01-10T00:00:00.000Z",21:13\n* Connection #0 to host localhost left intact\n')),Object(r.b)("h3",{id:"error-response-1"},"Error response"),Object(r.b)("p",null,"When query contains syntax errors ",Object(r.b)("inlineCode",{parentName:"p"},"/exp")," attempts to return as much diagnostic\ninformation as possible. Example erroneous request:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell",metastring:'title="Error response"',title:'"Error','response"':!0}),"curl -v -G http://localhost:9000/exp \\\n    --data-urlencode \"query=select AccidentIndex2, Date, Time from 'Accidents0514.csv'\" \\\n    -d limit=5\n")),Object(r.b)("p",null,"Response:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),'*   Trying ::1...\n* connect to ::1 port 9000 failed: Connection refused\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 9000 (#0)\n> GET /exp?query=select%20AccidentIndex2%2C%20Date%2C%20Time%20from%20%27Accidents0514.csv%27&limit=5 HTTP/1.1\n> Host: localhost:9000\n> User-Agent: curl/7.49.1\n> Accept: */*\n>\n< HTTP/1.1 400 Bad request\n< Server: questDB/1.0\n< Date: Wed, 9 Nov 2016 18:3:55 GMT\n< Transfer-Encoding: chunked\n< Content-Type: text/csv; charset=utf-8\n< Content-Disposition: attachment; filename="questdb-query-1478714635400.csv"\n<\n<em>Error at(7): Invalid column: AccidentIndex2</em>\n* Connection #0 to host localhost left intact\n')))}b.isMDXComponent=!0}}]);