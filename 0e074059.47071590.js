(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{66:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return j}));var n=a(2),b=a(6),r=(a(0),a(218)),l={title:"Configuration properties",sidebar_label:"server.conf",description:"Server configuration keys reference documentation."},c={unversionedId:"reference/configuration/server",id:"reference/configuration/server",isDocsHomePage:!1,title:"Configuration properties",description:"Server configuration keys reference documentation.",source:"@site/docs/reference/configuration/server.md",slug:"/reference/configuration/server",permalink:"/docs/reference/configuration/server",version:"current",sidebar_label:"server.conf",sidebar:"docs",previous:{title:"Root directory structure",permalink:"/docs/reference/configuration/root-directory-structure"},next:{title:"Telemetry",permalink:"/docs/reference/configuration/telemetry"}},i=[{value:"Customizing the configuration",id:"customizing-the-configuration",children:[]},{value:"Available keys and default values",id:"available-keys-and-default-values",children:[{value:"Telemetry",id:"telemetry",children:[]},{value:"Worker",id:"worker",children:[]},{value:"HTTP server",id:"http-server",children:[]},{value:"Cairo",id:"cairo",children:[]},{value:"Postgres wire",id:"postgres-wire",children:[]},{value:"InfluxDB line protocol (UDP)",id:"influxdb-line-protocol-udp",children:[]},{value:"InfluxDB line protocol (TCP)",id:"influxdb-line-protocol-tcp",children:[]},{value:"Load balancing",id:"load-balancing",children:[]}]}],o={rightToc:i};function j(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"QuestDB server configuration can be set in the ",Object(r.b)("inlineCode",{parentName:"p"},"server.conf")," configuration file.\nWhen a key is absent from the configuration file, the default value is used."),Object(r.b)("h2",{id:"customizing-the-configuration"},"Customizing the configuration"),Object(r.b)("p",null,"To override a default value with a custom value, add the key in the\nconfiguration file as follows:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"aaa.bbb.ccc.ddd=myValue\n")),Object(r.b)("p",null,"For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"shared.worker.count=5\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"A restart of QuestDB is required to pickup the new configuration"))),Object(r.b)("h2",{id:"available-keys-and-default-values"},"Available keys and default values"),Object(r.b)("h3",{id:"telemetry"},"Telemetry"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Property"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default value"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"telemetry.enabled"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Enable / disable anonymous ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/reference/configuration/telemetry/"}),"usage metrics collection"),".")))),Object(r.b)("h3",{id:"worker"},"Worker"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Property"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default value"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"shared.worker.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of worker threads shared across the application. Increasing this number will increase parallelism in the application at the expense of CPU resources.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"shared.worker.affinity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'comma-delimited list of CPU ids, one per thread specified in "shared.worker.count". By default, threads have no CPU affinity.')),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"shared.worker.haltOnError"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Toggle whether worker should stop on error.")))),Object(r.b)("h3",{id:"http-server"},"HTTP server"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Property"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default value"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.enabled"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Enable HTTP server.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.connection.pool.initial.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Initial size of pool of reusable objects that hold connection state. The pool should be configured to maximum realistic load so that it does not resize at runtime.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.connection.string.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"128"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Initial size of the string pool shared by HttpHeaderParser and HttpMultipartContentParser.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.multipart.header.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"512"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"HeaderParser buffer size in bytes.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.multipart.idle.spin.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10_000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"How long the code accumulates incoming data chunks for column and delimiter analysis.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.receive.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1m"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of receive buffer.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.request.header.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"64k"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of internal buffer allocated for HTTP request headers. The value is rounded up to the nearest power of 2. When HTTP request contains headers that exceed the buffer size server will disconnect the client with HTTP error in server log.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.response.header.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"32k"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of the internal response buffer. The value will be rounded up to the nearest power of 2. The buffer size should be large enough to accommodate max size of server response headers.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.worker.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of threads in private worker pool. When value is 0, HTTP server will be using shared worker pool of the server. Values above 0 switch on private pool.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.worker.affinity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"comma separated list of CPU core indexes. The number of items of this list must be equal to the worker count.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.worker.haltOnError"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Flag that indicates if worker thread must shutdown on unhandled error. We strongly recommend not to change default value.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.send.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2m"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of the internal send buffer. The larger than buffer size the fewer IO interruptions server is making at expense of memory usage per connection. There is a limit of send buffer size after which increasing it stops being useful in terms of performance. 2MB seems to be optimal value.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.static.index.file.name"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"index.html"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Name of index file for the Web Console.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.frozen.clock"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Sets the clock to always return zero. This configuration parameter is used for internal testing.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.allow.deflate.before.send"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Enable / disable Gzip compression of outgoing data.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.keep-alive.timeout"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"5"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Used together with ",Object(r.b)("inlineCode",{parentName:"td"},"http.keep-alive.max")," to set the value of HTTP ",Object(r.b)("inlineCode",{parentName:"td"},"Keep-Alive")," response header. This instructs browser to keep TCP connection open.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.keep-alive.max"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10_000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"See ",Object(r.b)("inlineCode",{parentName:"td"},"http.keep-alive.timeout"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.static.pubic.directory"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"public"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The name of directory for public web site.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.net.active.connection.limit"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"256"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The number of simultaneous TCP connection to the HTTP server. The rationale of the value is to control server memory consumption.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.net.event.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Internal IO event queue capacity (EPoll, KQqueu, Select). Size of these queues must be larger than ",Object(r.b)("inlineCode",{parentName:"td"},"http.net.active.connection.limit"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.net.io.queue.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Internal IO queue of HTTP server. Size of this queue must be larger than ",Object(r.b)("inlineCode",{parentName:"td"},"http.net.active.connection.limit"),". Queue size smaller than active connection max will substantially slow down the server by increasing wait times. Queue larger than connection max reduces wait time to 0.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.net.idle.connection.timeout"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"300000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"TCP connection idle timeout in milliseconds. Connection is closed by HTTP server when this timeout lapses.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.net.interest.queue.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Internal queue size. This is also related to ",Object(r.b)("inlineCode",{parentName:"td"},"http.net.active.connection.limit")," in a way that sizes larger than connection max remove any waiting.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.net.listen.backlog"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"256"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Backlog argument value for ",Object(r.b)("a",Object(n.a)({parentName:"td"},{href:"https://man7.org/linux/man-pages/man2/listen.2.html"}),"listen()")," call.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.net.snd.buf.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2m"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Maximum send buffer size on each TCP socket. If value is -1 socket send buffer remains unchanged from OS default.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.net.rcv.buf.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2m"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Maximum receive buffer size on each TCP socket. If value is -1 socket receive buffer remains unchanged from OS default.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.date.adapter.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of date adaptor pool. This should be set to the anticipated maximum number of ",Object(r.b)("inlineCode",{parentName:"td"},"DATE")," fields a text input can have. The pool is assigned to connection state and is reused alongside of connection state object.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.json.cache.limit"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16384"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"JSON parser cache limit. Cache is used to compose JSON elements that have been broken up by TCP protocol. This value limits the maximum length of individual tag or tag value.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.json.cache.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"8192"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Initial size of JSON parser cache. The value must not exceed ",Object(r.b)("inlineCode",{parentName:"td"},"http.text.json.cache.limit")," and should be set to avoid cache resizes at runtime.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.max.required.delimiter.stddev"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0.1222d"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The maximum standard deviation value for the algorithm that calculates text file delimiter. Usually when text parser cannot recognise the delimiter it will log the calculated and maximum standard deviation for the delimiter candidate.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.max.required.line.length.stddev"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0.8"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Maximum standard deviation value for the algorithm that classifies input as text or binary. For the values above configured stddev input will be considered binary.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.metadata.string.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"128"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The initial size of pool for objects that wrap individual elements of metadata JSON, such as column names, date pattern strings and locale values.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.roll.buffer.limit"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4m"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The limit of text roll buffer. See ",Object(r.b)("inlineCode",{parentName:"td"},"http.text.roll.buffer.size")," for description.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.roll.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Roll buffer is a structure in text parser that holds a copy of a line that has been broken up by TCP. The size should be set to the maximum length of text line in text input.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.analysis.max.lines"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.lexer.string.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"64"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The initial capacity of string fool, which wraps ",Object(r.b)("inlineCode",{parentName:"td"},"STRING")," column types in text input. The value should correspond to the maximum anticipated number of STRING columns in text input.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.timestamp.adapter.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"64"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of timestamp adaptor pool. This should be set to the anticipated maximum number of ",Object(r.b)("inlineCode",{parentName:"td"},"TIMESTAMP")," fields a text input can have. The pool is assigned to connection state and is reused alongside of connection state object")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.text.utf8.sink.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4096"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Initial size of UTF-8 adaptor sink. The value should correspond the maximum individual field value length in text input")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.json.query.connection.check.frequency"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1_000_000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value to throttle check if client socket has been disconnected. It is not recommended to change this value")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.json.query.float.scale"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The scale value of string representation of ",Object(r.b)("inlineCode",{parentName:"td"},"FLOAT")," values")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.json.query.double.scale"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"12"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The scale value of string representation of ",Object(r.b)("inlineCode",{parentName:"td"},"DOUBLE")," values")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.bind.to"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0.0.0.0:9000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"IP address and port of HTTP server. 0 means that http server will bind to all network interfaces. You can specify IP address of any individual network interface on your system")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.security.readonly"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Forces HTTP read only mode when ",Object(r.b)("inlineCode",{parentName:"td"},"true"),", which disables commands which modify the data or data structure.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.security.max.response.rows"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Long.MAX_VALUE"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Limit the number of response rows over HTTP.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.security.interrupt.on.closed.connection"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Switch to turn on terminating SQL processing if the HTTP connection is closed, the mechanism affects performance so the connection is only checked after http.security.interruptor.iterations.per.check calls are made to the check method. The mechanism also reads from the input stream and discards it since some HTTP clients send this as a keep alive in between requests, http.security.interruptor.buffer.size denotes the size of the buffer for this.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.security.interruptor.iterations.per.check"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2000000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"http.security.interruptor.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"32"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"cairo"},"Cairo"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Property"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default value"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.copy.root"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"null"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Input root directory for backups.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.backup.root"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"null"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Output root directory for backups.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.backup.dir.datetime.format"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"null"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Date format for backup directory.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.backup.dir.tmp.name"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"tmp"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Name of tmp directory used during backup.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.backup.mkdir.mode"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"509"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Permission used when creating backup directories.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.root"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"db"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Directory for storing db tables and metadata. This directory is inside the server root directory provided at startup.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.commit.mode"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"nosync"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"How changes to table are flushed to disk upon commit. Choices: ",Object(r.b)("inlineCode",{parentName:"td"},"nosync"),", ",Object(r.b)("inlineCode",{parentName:"td"},"async")," (flush call schedules update, returns immediately), ",Object(r.b)("inlineCode",{parentName:"td"},"sync")," (waits for flush to complete).")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.create.as.select.retry.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"5"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of types table creation or insertion will be attempted.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.default.map.type"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fast"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Type of map used. Options: ",Object(r.b)("inlineCode",{parentName:"td"},"fast")," (speed at the expense of storage), ",Object(r.b)("inlineCode",{parentName:"td"},"compact"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.default.symbol.cache.flag"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"When ",Object(r.b)("inlineCode",{parentName:"td"},"true"),", symbol values will be cached on Java heap.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.default.symbol.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"256"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Specifies approximate capacity for ",Object(r.b)("inlineCode",{parentName:"td"},"SYMBOL")," columns. It should be equal to number of unique symbol values stored in the table and getting this value badly wrong will cause performance degradation. Must be power of 2.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.file.operation.retry.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"30"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of attempts to open files.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.idle.check.interval"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"300000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Frequency of writer maintenance job in milliseconds.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.inactive.reader.ttl"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-120000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Frequency of reader pool checks for inactive readers in milliseconds.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.inactive.writer.ttl"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-600000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Frequency of writer pool checks for inactive writers in milliseconds.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.index.value.block.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"256"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Approximation of number of rows for a single index key, must be power of 2.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.max.swap.file.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"30"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of attempts to open swap files.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.mkdir.mode"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"509"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"File permission mode for new directories.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.parallel.index.threshold"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"100000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Minimum number of rows before allowing use of parallel indexation.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.reader.pool.max.segments"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"5"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of attempts to get TableReader.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.spin.lock.timeout"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1_000_000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Timeout when attempting to get BitmapIndexReaders in microseconds.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.cache.rows"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of rows for the query cache.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.cache.blocks"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of blocks for the query cache.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.character.store.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of the CharacterStore.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.character.store.sequence.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"64"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of the CharacterSequence pool.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.column.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4096"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of the Column pool in the SqlCompiler.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.compact.map.load.factor"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0.7"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Load factor for CompactMaps.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.expression.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"8192"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of the ExpressionNode pool in SqlCompiler.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.fast.map.load.factor"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0.5"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Load factor for all FastMaps.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.join.context.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"64"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of the JoinContext pool in SqlCompiler.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.lexer.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2048"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of FloatingSequence pool in GenericLexer.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.map.key.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2m"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Key capacity in FastMap and CompactMap.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.map.max.resizes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2^31"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of map resizes in FastMap and CompactMap before a resource limit exception is thrown, each resize doubles the previous size.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.map.page.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4m"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Memory page size for FastMap and CompactMap.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.map.max.pages"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2^31"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Memory max pages for CompactMap.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.model.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of the QueryModel pool in the SqlCompiler.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.sort.key.page.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4m"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Memory page size for storing keys in LongTreeChain.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.sort.key.max.pages"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2^31"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Max number of pages for storing keys in LongTreeChain before a resource limit exception is thrown.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.sort.light.value.page.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1048576"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Memory page size for storing values in LongTreeChain.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.sort.light.value.max.pages"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2^31"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Max pages for storing values in LongTreeChain.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.hash.join.value.page.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16777216"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Memory page size of the slave chain in full hash joins.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.hash.join.value.max.pages"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2^31"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Max pages of the slave chain in full hash joins.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.latest.by.row.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of rows for LATEST BY.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.hash.join.light.value.page.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1048576"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Memory page size of the slave chain in light hash joins.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.hash.join.light.value.max.pages"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2^31"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Max pages of the slave chain in light hash joins.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.sort.value.page.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16777216"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Memory page size of file storing values in SortedRecordCursorFactory.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.sort.value.max.pages"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2^31"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Max pages of file storing values in SortedRecordCursorFactory.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.work.steal.timeout.nanos"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10_000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Latch await timeout in nanos for stealing indexing work from other threads.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.parallel.indexing.enabled"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Allows parallel indexation. Works in conjunction with cairo.parallel.index.threshold.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.join.metadata.page.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16384"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Memory page size for JoinMetadata file.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.join.metadata.max.resizes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2^31"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of map resizes in JoinMetadata before a resource limit exception is thrown, each resize doubles the previous size.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.analytic.column.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"64"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of AnalyticColumn pool in SqlParser.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.create.table.model.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of CreateTableModel pool in SqlParser.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.column.cast.model.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of CreateTableModel pool in SqlParser.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.rename.table.model.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of RenameTableModel pool in SqlParser.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.with.clause.model.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"128"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of WithClauseModel pool in SqlParser.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.insert.model.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"64"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of InsertModel pool in SqlParser.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.copy.model.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"32"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of CopyModel pool in SqlParser.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.copy.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2m"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of buffer used when copying tables.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.double.cast.scale"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"12"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.float.cast.scale"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.sql.copy.formats.file"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"/text_loader.json"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Name of file with user's set of date and timestamp formats.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.date.locale"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"en"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"cairo.timestamp.locale"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"en"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"postgres-wire"},"Postgres wire"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Property"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default value"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.enabled"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.net.active.connection.limit"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.net.bind.to"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0.0.0.0:8812"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.net.event.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.net.io.queue.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.net.idle.timeout"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"300000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.net.interest.queue.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.net.listen.backlog"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"50000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.net.recv.buf.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.net.send.buf.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.character.store.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4096"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.character.store.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"64"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.connection.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"64"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.password"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"quest"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.user"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"admin"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.factory.cache.column.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.factory.cache.row.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.idle.recv.count.before.giving.up"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.idle.send.count.before.giving.up"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.max.blob.size.on.query"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"512k"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.recv.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1M"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.send.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1M"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.date.locale"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"en"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.timestamp.locale"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"en"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.worker.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.worker.affinity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-1,-1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.halt.on.error"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"pg.daemon.pool"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"influxdb-line-protocol-udp"},"InfluxDB line protocol (UDP)"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Property"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default value"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.join"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'"232.1.2.3"'),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'Multicast address receiver joins. This values is ignored when receiver is in "unicast" mode.')),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.bind.to"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'"0.0.0.0:9009"'),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"IP address of the network interface to bind listener to and port. By default UDP receiver listens on all network interfaces.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.commit.rate"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1000000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"For packet bursts the number of continuously received messages after which receiver will force commit. Receiver will commit irrespective of this parameter when there are no messages.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.msg.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2048"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Buffer used to receive single message. This value should be roughly equal to your MTU size.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.msg.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Only for Linux. On Linix QuestDB will use recvmmsg(). This is the max number of messages to receive at once.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.receive.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"8388608"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"UDP socket buffer size. Larger size of the buffer will help reduce message loss during bursts.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.enabled"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Flag to enable or disable UDP receiver.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.own.thread"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'When "true" UDP receiver will use its own thread and busy spin that for performance reasons. "false" makes receiver use worker threads that do everything else in QuestDB.')),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.own.thread.affinity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-1 does not set thread affinity. OS will schedule thread and it will be liable to run on random cores and jump between the. 0 or higher pins thread to give core. This property is only valid when UDP receiver uses own thread.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.unicast"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"When true, UDP will me unicast. Otherwise multicast.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.timestamp"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Input timestamp resolution. Possible values are ",Object(r.b)("inlineCode",{parentName:"td"},"n"),", ",Object(r.b)("inlineCode",{parentName:"td"},"u"),", ",Object(r.b)("inlineCode",{parentName:"td"},"ms"),", ",Object(r.b)("inlineCode",{parentName:"td"},"s")," and ",Object(r.b)("inlineCode",{parentName:"td"},"h"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.udp.commit.mode"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'"nosync"'),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'Commit durability. Available values are "nosync", "sync" and "async".')))),Object(r.b)("h3",{id:"influxdb-line-protocol-tcp"},"InfluxDB line protocol (TCP)"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Property"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default value"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.enabled"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Enable or disable line protocol over TCP.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.net.active.connection.limit"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.net.bind.to"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0.0.0.0:9009"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"IP address of the network interface to bind listener to and port. By default TCP receiver listens on all network interfaces.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.net.event.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.net.io.queue.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.net.idle.timeout"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"300000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.net.interest.queue.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1024"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.net.listen.backlog"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"50000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.net.recv.buf.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.connection.pool.capacity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"64"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.timestamp"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"n"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Input timestamp resolution. Possible values are ",Object(r.b)("inlineCode",{parentName:"td"},"n"),", ",Object(r.b)("inlineCode",{parentName:"td"},"u"),", ",Object(r.b)("inlineCode",{parentName:"td"},"ms"),", ",Object(r.b)("inlineCode",{parentName:"td"},"s")," and ",Object(r.b)("inlineCode",{parentName:"td"},"h"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.msg.buffer.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2048"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of the buffer read from queue. Maximum size of write request, regardless of the number of measurements.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.max.measurement.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2048"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Maximum size of any measurement.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.writer.queue.size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"128"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Size of the queue between network IO and writer jobs. Each queue entry represents a measurement.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.worker.count"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of dedicated worker threads assigned to write data. When ",Object(r.b)("inlineCode",{parentName:"td"},"0"),", the writer jobs will use the shared pool.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.worker.affinity"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Comma-separated list of thread numbers which should be pinned for line protocol ingestion over TCP. Example ",Object(r.b)("inlineCode",{parentName:"td"},"line.tcp.worker.affinity=1,3,4"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.halt.on.error"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"false"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}))))),Object(r.b)("h3",{id:"load-balancing"},"Load balancing"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Property"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default value"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.n.updates.per.load.balance"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Maximum number of updates in a given table since the last load balancing before triggering a new load balancing job.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.max.load.ratio"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1.9"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Maximum load ratio (max loaded worker/min loaded worker) before QuestDB will attempt to rebalance the load between the writer workers.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.max.uncommitted.rows"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Maximum number of uncommitted rows, note that rows will always be committed if they have been received line.tcp.maintenance.job.hysteresis.in.ms ms ago.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line.tcp.maintenance.job.hysteresis.in.ms"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1000"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Maximum amount of time in between maintenance jobs, these will commit any uncommited data.")))))}j.isMDXComponent=!0}}]);