(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{197:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return b})),a.d(t,"default",(function(){return c}));var n=a(2),r=a(6),l=(a(0),a(218)),i={title:"How to use the QuestDB REST API",sidebar_label:"REST API",description:"Tutorial showing how to use QuestDB's REST API. It can be used to run queries as well as import/export data."},s={unversionedId:"guide/rest",id:"guide/rest",isDocsHomePage:!1,title:"How to use the QuestDB REST API",description:"Tutorial showing how to use QuestDB's REST API. It can be used to run queries as well as import/export data.",source:"@site/docs/guide/rest.md",slug:"/guide/rest",permalink:"/docs/guide/rest",version:"current",sidebar_label:"REST API",sidebar:"docs",previous:{title:"How to access QuestDB from PSQL (alpha)",permalink:"/docs/guide/postgres-wire"},next:{title:"How to perform CRUD operations",permalink:"/docs/guide/crud"}},b=[{value:"Get test data",id:"get-test-data",children:[]},{value:"Create tables",id:"create-tables",children:[]},{value:"Import data",id:"import-data",children:[]},{value:"Run queries",id:"run-queries",children:[]},{value:"Download results",id:"download-results",children:[]},{value:"Shut down and cleanup",id:"shut-down-and-cleanup",children:[]}],o={rightToc:b};function c(e){var t=e.components,i=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},o,i,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"QuestDB comes with an HTTP server which exposes a REST API. This guide will\nteach you how to use the REST API to create tables, import data, run queries,\nand export results with ",Object(l.b)("inlineCode",{parentName:"p"},"curl"),". If you prefer a more visual approach, you can\nalso use the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/guide/web-console/"}),"Web Console"),"."),Object(l.b)("p",null,"For more information about our REST API, please consult the\n",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/api/rest/"}),"REST API")),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"This requires a running instance of QuestDB with port ",Object(l.b)("inlineCode",{parentName:"p"},"9000")," exposed. You can\nlearn how to do so with ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/guide/docker/"}),"Docker")))),Object(l.b)("h2",{id:"get-test-data"},"Get test data"),Object(l.b)("p",null,"The first step is to get data into the database. Here are some sample files you\nmay want to try. You may use only one (we provide example queries for both), but\nusing the two files will allow you to try asof join."),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Data"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Download"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"File Size"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Number of rows"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("strong",{parentName:"td"},"NYC taxi data")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10 years of NYC taxi trips. Simplified to 2 trips per hour. Contains ride start and end times, distance, passenger count, fare, tip, and total amount paid."),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("a",Object(n.a)({parentName:"td"},{href:"https://s3-eu-west-1.amazonaws.com/questdb.io/datasets/trips.csv"}),"Download")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"16.2 Mb"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"183,000")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("strong",{parentName:"td"},"NYX weather")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10 years of hourly weather data in central NYC. 137,000 rows. Contains timestamp, temperature, wind, snow, and more"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("a",Object(n.a)({parentName:"td"},{href:"https://s3-eu-west-1.amazonaws.com/questdb.io/datasets/weather.csv"}),"Download")),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"6.7 Mb"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"137,000")))),Object(l.b)("h2",{id:"create-tables"},"Create tables"),Object(l.b)("p",null,"With your container running and port 9000 mapped, you can now send curl requests\nto the database server. This guide shows examples of how to interact with it."),Object(l.b)("p",null,"First, we create the tables using ",Object(l.b)("inlineCode",{parentName:"p"},"/exec"),", which allows us to pass SQL\nstatements. We also specify a designated timestamp column which will be useful\nfor time based queries and time joins across tables."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Create trips table"',title:'"Create',trips:!0,'table"':!0}),'curl -G http://localhost:9000/exec --data-urlencode \\\n"query=CREATE TABLE trips(pickupDatetime timestamp, \\\ndropoffDatetime timestamp, passengerCount int, tripDistance double, \\\nfareAmount double, tipAmount double, taxesAndTolls double, totalAmount double) \\\ntimestamp(pickupDatetime);"\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Create weather table"',title:'"Create',weather:!0,'table"':!0}),'curl -G http://localhost:9000/exec --data-urlencode \\\n"query=CREATE TABLE weather(timestamp timestamp, windSpeed int, \\\nskyCover symbol, tempF int, rain1H double, snowDepth int) \\\ntimestamp(timestamp);"\n')),Object(l.b)("p",null,"Note that the table creation step is optional as QuestDB automatically\nrecognizes schema. However, creating the table manually allows us to specify a\n",Object(l.b)("inlineCode",{parentName:"p"},"dedicated timestamp")," column which will be useful for time based queries, and to\nspecify ",Object(l.b)("inlineCode",{parentName:"p"},"symbol")," which are more efficient than the automatically ",Object(l.b)("inlineCode",{parentName:"p"},"string")," type\nfor skyCover."),Object(l.b)("h2",{id:"import-data"},"Import data"),Object(l.b)("p",null,"We import both files using the ",Object(l.b)("inlineCode",{parentName:"p"},"/imp")," endpoint. Note that I set the flag ",Object(l.b)("inlineCode",{parentName:"p"},"name"),"\nso the data flows into the tables we just created. Otherwise, the data would be\ninserted in a new table named after the file, for example ",Object(l.b)("inlineCode",{parentName:"p"},"weather.csv"),". We also\nset the ",Object(l.b)("inlineCode",{parentName:"p"},"timestamp")," flag to mark the designated timestamp column in the csv\nfile."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Populate trips table"',title:'"Populate',trips:!0,'table"':!0}),'curl -i -F data=@trips.csv \\\n"http://localhost:9000/imp?\\\nname=trips&forceHeaders=true&overwrite=false&timestamp=pickupDatetime"\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Populate weather table"',title:'"Populate',weather:!0,'table"':!0}),'curl -i -F data=@weather.csv \\\n"http://localhost:9000/imp?\\\nname=weather&forceHeaders=true&overwrite=false&timestamp=timestamp"\n')),Object(l.b)("p",null,"In addition to the csv import, we can also use ",Object(l.b)("inlineCode",{parentName:"p"},"exec")," to execute INSERT\nstatements. You can either send all fields or a subset of the schema like in the\nexample below. This is useful to send values in a different order from the table\ndefinition. It is also useful to skip values when they are not relevant. Missing\nvalues will be inserted as ",Object(l.b)("inlineCode",{parentName:"p"},"null"),"."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Insert using SQL"',title:'"Insert',using:!0,'SQL"':!0}),'curl -G http://localhost:9000/exec --data-urlencode \\\n"query=INSERT INTO weather(timestamp,tempF) values(systimestamp(),45);"\n')),Object(l.b)("h2",{id:"run-queries"},"Run queries"),Object(l.b)("p",null,"Just like ",Object(l.b)("inlineCode",{parentName:"p"},"CREATE TABLE")," and ",Object(l.b)("inlineCode",{parentName:"p"},"INSERT INTO")," statements, we can use ",Object(l.b)("inlineCode",{parentName:"p"},"exec")," to pass\nSQL queries. ",Object(l.b)("inlineCode",{parentName:"p"},"exec")," returns results in JSON."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Simple query"',title:'"Simple','query"':!0}),'curl -G http://localhost:9000/exec --data-urlencode \\\n"query=select timestamp, tempF from weather limit 2;"\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json",metastring:'title="JSON Response"',title:'"JSON','Response"':!0}),'{\n  "query": "select timestamp, tempF from weather limit 2;",\n  "columns": [\n    {\n      "name": "timestamp",\n      "type": "TIMESTAMP"\n    },\n    {\n      "name": "tempF",\n      "type": "INT"\n    }\n  ],\n  "dataset": [\n    ["2010-01-01T00:00:00.000000Z", 34],\n    ["2010-01-01T00:51:00.000000Z", 34]\n  ],\n  "count": 2\n}\n')),Object(l.b)("p",null,"Here are a few example queries you could run against the dataset."),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"table"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"query"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"trips"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Average week by week trip distance over time"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"select pickupDatetime, avg(tripDistance) from trips timestamp(pickupDatetime) sample by 7d;"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"trips"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Average monthly trip duration in minutes"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"select pickupDatetime, avg(datediff('m',pickupDatetime, dropoffDatetime)) from trips sample by 1M;"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"trips"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Average fare per passenger count bucket"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"select passengerCount, avg(tipAmount/fareAmount)*100 from trips order by passengerCount;"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"trips"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Average tip percentage per passenger count bucket"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"select passengerCount, avg(tipAmount/fareAmount)*100 from trips order by passengerCount;"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"weather"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Rainy days"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"select timestamp, sum(rain1H)from weathersample by 1d;"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"weather"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Temperature seasonality"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"select timestamp, avg(tempF)from weather sample by 7d;"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"trips and weather"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Joining trips and weather data. This query returns the prevailing weather conditions for every trip in 2017"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.b)("inlineCode",{parentName:"td"},"trips where pickupDatetime='2017' asof join weather;"))))),Object(l.b)("h2",{id:"download-results"},"Download results"),Object(l.b)("p",null,"You can use the ",Object(l.b)("inlineCode",{parentName:"p"},"/exp")," endpoint to export query results as follows."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Save results as csv"',title:'"Save',results:!0,as:!0,'csv"':!0}),'curl -G http://localhost:9000/exp --data-urlencode \\\n"query=select * from weather limit 100;" > results.csv\n')),Object(l.b)("p",null,"If you are querying from the Web Console, then you can download the results\nusing the ",Object(l.b)("inlineCode",{parentName:"p"},"download to csv")," button."),Object(l.b)("p",null,Object(l.b)("img",{alt:"Preview of the export function in the Web Console",src:a(376).default})),Object(l.b)("h2",{id:"shut-down-and-cleanup"},"Shut down and cleanup"),Object(l.b)("p",null,"As QuestDB is a persisted database, the data will remain after you shut down the\nserver. If you would like to remove the data, you can run the following\nstatements to drop the tables."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Cleanup"',title:'"Cleanup"'}),"DROP TABLE trips;\nDROP TABLE weather;\n")))}c.isMDXComponent=!0},376:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/download-d5773ed48055c3ff84689cee94dbee31.gif"}}]);