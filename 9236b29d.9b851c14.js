(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{151:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return m}));var n=a(2),o=a(6),s=(a(0),a(218)),i={title:"Storage model",sidebar_label:"Storage model",description:"Overview of QuestDB's column-based storage model. It ensures ACID properties while keeping low overhead for maximum performance."},r={unversionedId:"concept/storage-model",id:"concept/storage-model",isDocsHomePage:!1,title:"Storage model",description:"Overview of QuestDB's column-based storage model. It ensures ACID properties while keeping low overhead for maximum performance.",source:"@site/docs/concept/storage-model.md",slug:"/concept/storage-model",permalink:"/docs/concept/storage-model",version:"current",sidebar_label:"Storage model",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/introduction"},next:{title:"Designated timestamp",permalink:"/docs/concept/designated-timestamp"}},c=[{value:"Append model",id:"append-model",children:[]},{value:"Read model",id:"read-model",children:[]},{value:"ACID properties",id:"acid-properties",children:[]},{value:"Summary",id:"summary",children:[]}],d={rightToc:c};function m(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(n.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"QuestDB uses a ",Object(s.b)("strong",{parentName:"p"},"column-based")," storage model. Data is stored in tables with\neach column stored in its own file and its own native format. New data is\nappended to the bottom of each column to allow data to be organically retrieved\nin the same order that it was ingested."),Object(s.b)("h2",{id:"append-model"},"Append model"),Object(s.b)("p",null,"QuestDB appends one column at a time and each one is updated using the same\nmethod. The tail of column file is mapped into the memory page in RAM and the\ncolumn append is effectively a memory write at an address. Once the memory page\nis exhausted it is unmapped (thus writing data to disk) and a new page is\nmapped."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"This method ensures minimum resource churn and consistent append latency.")),Object(s.b)("img",{alt:"Architecture of the file storing a column",className:"screenshot--shadow screenshot--docs",src:"/img/docs/concepts/columnRead.svg"}),Object(s.b)("h2",{id:"read-model"},"Read model"),Object(s.b)("p",null,"Table columns are randomly accessible. Columns with fixed size data types are\nread by translating the record number into a file offset by a simple bit shift.\nThe offset in the column file is then translated into an offset in a lazily\nmapped memory page, where the required value is read from."),Object(s.b)("img",{alt:"Diagram showing how the data from a column file is mapped to the memory",className:"screenshot--shadow screenshot--docs",src:"/img/docs/concepts/columnUpdate.svg"}),Object(s.b)("h2",{id:"acid-properties"},"ACID properties"),Object(s.b)("p",null,"QuestDB utilizes\n",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Atomicity_(database_systems)"}),"ACID properties"),"\n(Atomicity, Consistency, Isolation, Durability) to ensure data integrity during\na transaction. ",Object(s.b)("strong",{parentName:"p"},"QuestDB\u2019s transaction size is only limited by the available\ndisk space.")),Object(s.b)("p",null,"To guarantee ",Object(s.b)("strong",{parentName:"p"},"atomicity"),", each table maintains a ",Object(s.b)("inlineCode",{parentName:"p"},"last_committed_record_count"),"\nin a separate file. By convention, any table reader will never read more records\nthan ",Object(s.b)("inlineCode",{parentName:"p"},"tx_count"),". This enables the ",Object(s.b)("strong",{parentName:"p"},"isolation")," property: where uncommitted data\ncannot be read. Since uncommitted data is appended directly to the table, the\ntransaction size is only limited by the available disk space."),Object(s.b)("p",null,"Once all data is appended, QuestDB ",Object(s.b)("inlineCode",{parentName:"p"},"commit()")," ensures that the ",Object(s.b)("inlineCode",{parentName:"p"},"tx_count")," is\nupdated atomically both in multi-threaded and multi-process environments. It\ndoes so ",Object(s.b)("inlineCode",{parentName:"p"},"lock-free")," to ensure minimal impact on concurrent reads."),Object(s.b)("p",null,"The ",Object(s.b)("strong",{parentName:"p"},"consistency")," assurance of the data stored is limited to QuestDB\nauto-repairing abnormally terminated transactions. We do not yet support\nuser-defined constraints, checks and triggers."),Object(s.b)("p",null,"Data ",Object(s.b)("strong",{parentName:"p"},"durability")," can be configured with ",Object(s.b)("inlineCode",{parentName:"p"},"commit()")," optionally being able to\ninvoke msync() with a choice of synchronous or asynchronous IO."),Object(s.b)("img",{alt:"Diagram of a commit across several column files",className:"screenshot--shadow screenshot--docs",src:"/img/docs/concepts/commitModel.svg"}),Object(s.b)("h2",{id:"summary"},"Summary"),Object(s.b)("p",null,"The QuestDB storage model uses memory mapped files and cross-process atomic\ntransaction updates as a low overhead method of inter-process communication.\nData committed by one process can be instantaneously read by another process\neither randomly (via queries) or incrementally (as data queue). QuestDB provides\na variety of reader implementations."),Object(s.b)("img",{alt:"Architecture of the storage model with column files, readers/writers and the mapped memory",className:"screenshot--shadow screenshot--docs",src:"/img/docs/concepts/storageSummarized.svg"}),Object(s.b)("span",null))}m.isMDXComponent=!0}}]);