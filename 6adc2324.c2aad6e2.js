(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{134:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return o}));var n=a(2),b=a(6),i=(a(0),a(218)),r={title:"Data types",sidebar_label:"Data types",description:"Data types reference documentation."},l={unversionedId:"reference/sql/datatypes",id:"reference/sql/datatypes",isDocsHomePage:!1,title:"Data types",description:"Data types reference documentation.",source:"@site/docs/reference/sql/datatypes.md",slug:"/reference/sql/datatypes",permalink:"/docs/reference/sql/datatypes",version:"current",sidebar_label:"Data types",sidebar:"docs",previous:{title:"SQL execution order",permalink:"/docs/concept/sql-execution-order"},next:{title:"ALTER TABLE ADD COLUMN keywords",permalink:"/docs/reference/sql/alter-table-add-column"}},c=[],d={rightToc:c};function o(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The type system is derived from Java types."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Storage bits"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"1")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"boolean ",Object(i.b)("inlineCode",{parentName:"td"},"true")," or ",Object(i.b)("inlineCode",{parentName:"td"},"false"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"byte")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"8")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signed integer ",Object(i.b)("inlineCode",{parentName:"td"},"-128")," to ",Object(i.b)("inlineCode",{parentName:"td"},"127"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"short")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"16")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signed integer ",Object(i.b)("inlineCode",{parentName:"td"},"-32768")," to ",Object(i.b)("inlineCode",{parentName:"td"},"32767"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"char")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"16")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"unicode")," character")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"int")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"32")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signed integer ",Object(i.b)("inlineCode",{parentName:"td"},"0x80000000")," to ",Object(i.b)("inlineCode",{parentName:"td"},"0x7fffffff"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"float")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"32")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"single precision IEEE 754 floating point value")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"symbol")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"32")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Symbols are stored as 32-bit signed indexes from symbol table. Each index will have a corresponding ",Object(i.b)("inlineCode",{parentName:"td"},"string")," value. Translation from index to string value is done automatically when data is being written or read. Symbol table is stored separately from column.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"32+n*16")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Length-prefixed sequence of UTF-16 encoded characters whose length is stored as signed 32-bit integer with maximum value of ",Object(i.b)("inlineCode",{parentName:"td"},"0x7fffffff"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"long")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"64")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signed integer ",Object(i.b)("inlineCode",{parentName:"td"},"0x8000000000000000L")," to ",Object(i.b)("inlineCode",{parentName:"td"},"0x7fffffffffffffffL"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"date")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"64")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signed offset in ",Object(i.b)("strong",{parentName:"td"},"milliseconds")," from ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"https://en.wikipedia.org/wiki/Unix_time"}),"Unix Epoch"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"timestamp")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"64")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"signed offset in ",Object(i.b)("strong",{parentName:"td"},"microseconds")," from ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"https://en.wikipedia.org/wiki/Unix_time"}),"Unix Epoch"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"double")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"64")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"double precision IEEE 754 floating point value")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"binary")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"64+n*8")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Length-prefixed sequence of bytes whose length is stored as signed 64-bit integer with maximum value of ",Object(i.b)("inlineCode",{parentName:"td"},"0x7fffffffffffffffL"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"long256")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"256")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"unsigned 256-bit integer")))),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},Object(i.b)("inlineCode",{parentName:"p"},"BINARY")," field size is limited either by 64-Bit signed int (8388608 peta bytes)\nor disk size, whichever is smaller."))),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},Object(i.b)("inlineCode",{parentName:"p"},"STRING")," field size is limited by either 32-bit signed int (1073741824\ncharacters) or disk size, whichever is smaller."))))}o.isMDXComponent=!0}}]);