(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{196:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return c}));var n=a(2),r=a(6),o=(a(0),a(218)),i={title:"Querying data in a Jupyter Notebook",author:"David G Simmons",author_title:"QuestDB Team",author_url:"https://github.com/davidgs",author_image_url:"https://avatars.githubusercontent.com/davidgs",description:"Querying data from QuestDB in a Jupyter notebook in a Python application.",tags:["python","tutorial"]},s={permalink:"/blog/2020/06/15/python-questdb-tutorial",source:"@site/blog/2020-06-15-python-questdb-tutorial.md",description:"Querying data from QuestDB in a Jupyter notebook in a Python application.",date:"2020-06-15T00:00:00.000Z",tags:[{label:"python",permalink:"/blog/tags/python"},{label:"tutorial",permalink:"/blog/tags/tutorial"}],title:"Querying data in a Jupyter Notebook",readingTime:5.155,truncated:!0,prevItem:{title:"Demo launch on HackerNews postmorterm",permalink:"/blog/2020/07/01/we-put-a-sql-database-on-the-internet"},nextItem:{title:"IoT on QuestDB",permalink:"/blog/2020/06/05/iot-on-questdb"}},l=[{value:"Getting started",id:"getting-started",children:[]},{value:"Create a database",id:"create-a-database",children:[]},{value:"Generate some data",id:"generate-some-data",children:[]},{value:"Query data from QuestDB",id:"query-data-from-questdb",children:[]},{value:"Read the content into pandas dataframe",id:"read-the-content-into-pandas-dataframe",children:[]},{value:"Narrow the search",id:"narrow-the-search",children:[]},{value:"Plot the data",id:"plot-the-data",children:[]},{value:"Clean up",id:"clean-up",children:[]}],u={rightToc:l};function c(e){var t=e.components,i=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},u,i,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A short tutorial for Querying data from QuestDB in a Jupyter Notebook."),Object(o.b)("h2",{id:"getting-started"},"Getting started"),Object(o.b)("p",null,"To get started, you'll need a few things installed and set up. This should be\nquick."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"QuestDB:")," To install Questdb you can see\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/introduction#guides"}),"Installation")," for complete instructions in case you\nwant to use ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/guide/docker"}),"Docker"),", or ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/guide/homebrew"}),"brew")," on\nmacOS, but the easiest way is to download the binaries and run it directly.\nInstructions for that are ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/guide/binaries"}),"in the official documentation"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Jupyter Notebooks:")," These are interactive Python environments that will help\nyou run a complete version of this tutorial interactively. To run it, you\nshould:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"make sure you are running Python 3.x and not Python 2.7. If you're in doubt,\n",Object(o.b)("inlineCode",{parentName:"li"},"python --version")," will tell you."),Object(o.b)("li",{parentName:"ul"},"install Jupyter Notebooks with ",Object(o.b)("inlineCode",{parentName:"li"},"pip3 install --upgrade ipython jupyter")," make\nsure that the libraries we use in this tutorial are also installed with\n",Object(o.b)("inlineCode",{parentName:"li"},"pip3 install requests urlib matplotlib pandas")),Object(o.b)("li",{parentName:"ul"},"clone ",Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/davidgs/QuestNotebook"}),"this repository"),"\n(",Object(o.b)("inlineCode",{parentName:"li"},"git clone https://github.com/davidgs/QuestNotebook"),") in the repository\ndirectory run Jupyter Notebook")),Object(o.b)("p",null,"That will get you right back to a page that looks eerily similar to this that is\ninteractive, allowing you to run the code and interact with the database\nyourself."),Object(o.b)("p",null,"If you get errors like ",Object(o.b)("inlineCode",{parentName:"p"},"ModuleNotFoundError: No module named 'requests'")," for any\nof the libraries you installed above, double-check to make sure that you are\nactually using Python 3.x ",Object(o.b)("inlineCode",{parentName:"p"},"jupytper --path")," will let you know if Jupyter is\nusing 2.7 or 3.x"),Object(o.b)("h2",{id:"create-a-database"},"Create a database"),Object(o.b)("p",null,"We will need someplace to store our data, so let's create a test database where\nwe can put some random data."),Object(o.b)("p",null,"We will create a simple table with 5 columns, one of which is a timestamp."),Object(o.b)("p",null,"The Create operation in QuestDB appends records to the bottom of a table. If the\ntable has a designated new record, time stamps must be superior or equal to the\nlatest timestamp. Attempts to add a timestamp in middle of a table will result\nin a timestamp out of order error."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"cust_id")," is the customer identifier. It uniquely identifies a customer."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"balance_ccy")," balance currency. We use char in this example, but in general for\ntext entries we would use SYMBOL to avoid storing text against each record to\nsave space and increase database performance."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"balance")," is the current balance for customer and currency tuple."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"inactive")," is used to flag deleted records."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"timestamp")," timestamp in microseconds of the record. Note that if you receive\nthe timestamp data as a string, it could also be inserted using ",Object(o.b)("inlineCode",{parentName:"p"},"to_timestamp"),"."),Object(o.b)("p",null,"This should return a ",Object(o.b)("inlineCode",{parentName:"p"},"200")," status the first time you run it. If you run it more\nthan once, subsequent runs will return 400 because the database already exists."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import requests import urllib.parse as par\n  q = 'create table balances'\\\n    '(cust_id int,'\\\n    ' balance_ccy char,'\\\n    'balance double,'\\\n    'inactive boolean,'\\\n    'timestamp timestamp)'\\\n    'timestamp(timestamp)'\n  r = requests.get(\"http://localhost:9000/exec?query=\" + q)\n  print(r.status_code)\n")),Object(o.b)("h2",{id:"generate-some-data"},"Generate some data"),Object(o.b)("p",null,"Since we have a new setup, we should add some data to QuestDB so that we can\nhave something to query."),Object(o.b)("p",null,"We will add some random data, for now. You can re-run this section as many times\nas you want to add 100 entries at a time, or simply change the ",Object(o.b)("inlineCode",{parentName:"p"},"range(100)")," to\nadd as many datapoints as you wish."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import requests\nimport random\nfrom datetime import datetime\n\nsuccess = 0\nfail = 0\ncurrency = ["$", "\u20ac", "\xa3", "\xa5"]\nrandom.seed()\n\nfor x in range(1000):\n  cust = random.randint(20, 42)\n  cur = random.choice(currency)\n  bal = round(random.uniform(10.45, 235.15), 2)\n  act = bool(random.getrandbits(1))\n  query = "insert into balances values("\\\n      + str(cust) + ",\'"\\\n      + cur + "\'," \\\n      + str(bal) + "," \\\n      + str(act) + ",systimestamp())"\n  r = requests.get("http://localhost:9000/exec?query=" + query)\n  if r.status_code == 200:\n    success += 1\n  else:\n    fail += 1\n  print("Rows inserted: " + str(success))\n  if fail > 0:\n    print("Rows Failed: " + str(fail))\n')),Object(o.b)("h2",{id:"query-data-from-questdb"},"Query data from QuestDB"),Object(o.b)("p",null,"Now that we have data available, let's try querying some of it to see what we\nget back!"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import requests\nimport io\n\nr = requests.get("http://localhost:9000/exp?query=select * from balances")\nrawData = r.text\nprint(rawData)\n')),Object(o.b)("h2",{id:"read-the-content-into-pandas-dataframe"},"Read the content into pandas dataframe"),Object(o.b)("p",null,"So you'll notice that the returned data is just a massive CSV string. If you'd\nrather have JSON data, then you would change the endpoint to\nhttp://localhost:9000/exec ... But since we're going to use Pandas to frame our\ndata, we'll stick with CSV."),Object(o.b)("p",null,"We are also telling pandas to parse the ",Object(o.b)("inlineCode",{parentName:"p"},"timestamp")," field as a date."),Object(o.b)("p",null,"This is important since we're dealing with Time Series data."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import pandas as pd\n\npData = pd.read_csv(io.StringIO(rawData), parse_dates=['timestamp'])\nprint(pData)\n")),Object(o.b)("h2",{id:"narrow-the-search"},"Narrow the search"),Object(o.b)("p",null,"That's just getting us all the data, but let's narrow the search using some SQL\nclauses."),Object(o.b)("p",null,"Let's look for a specific ",Object(o.b)("inlineCode",{parentName:"p"},"cust_id")," and only balances of that customer that are\nin \\$s."),Object(o.b)("p",null,"We are also only interested in times the customer was active"),Object(o.b)("p",null,"Since this is SQL, you can make this query as simple, or as complex, as you'd\nlike."),Object(o.b)("p",null,"Since all of the data was generated randomly, this exact query may return no\nresults, so you may have to adjust the ",Object(o.b)("inlineCode",{parentName:"p"},"cust_id")," below until you get results\nback."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," The query string must be URL-encoded before it is sent."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'import urllib.parse\n\nq = "select cust_id,"\\\n    " balance,"\\\n    " balance_ccy,"\\\n    " inactive,"\\\n    " timestamp"\\\n    " from balances"\\\n    " where cust_id = 26"\\\n    " and balance_ccy = \'$\'"\\\n    " and not inactive"\n\nquery = urllib.parse.quote(q)\nr = requests.get("http://localhost:9000/exp?query=" + query)\nqueryData = r.text\nrawData = pd.read_csv(io.StringIO(queryData), parse_dates=[\'timestamp\'])\nprint(rawData)\n')),Object(o.b)("h2",{id:"plot-the-data"},"Plot the data"),Object(o.b)("p",null,"We will use matplotlib to plot the data"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'from matplotlib import pyplot as plt\n\nrawData.plot("timestamp", ["balance"], subplots=True)\n')),Object(o.b)("p",null,"From that query we should get a nice little plot of our data, like this:"),Object(o.b)("p",null,Object(o.b)("img",{alt:"Graph of the balance from the query",src:a(375).default})),Object(o.b)("h2",{id:"clean-up"},"Clean up"),Object(o.b)("p",null,"Now we will clean everything up for the next time."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'r = requests.get("http://localhost:9000/exec?query=drop table balances")\nif r.status_code == 200:\n  print("Database Table dropped")\nelse:\n  print("Database Table not Dropped: " + str(r.status_code))\n')),Object(o.b)("p",null,"You can now stop your QuestDB instance, if you'd like, or leave it running and\nfind some great uses for it!"),Object(o.b)("p",null,"If you enjoyed this tutorial, please\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://twitter.com/intent/follow?screen_name=QuestDB"}),"follow us")," on Twitter,\nand make sure you give our\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/questdb/questdb"}),"GitHub repository")," a star!"))}c.isMDXComponent=!0},375:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/graph-74ca7ab3894ace758b8b488c232d2327.png"}}]);